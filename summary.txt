git 指令：
  git rebase -i commitID  合并多个commit为1个
  git reset --hard commitID reset当前分支到某次提交
  git cherry-pick 挑选某个分支上的某次提交添加到当前分支上
  git pull origin master 从远端master分支上拉到当前分支（采用的是merge操作）
  git push origin master-f 将当前分支上的内容push到远端mater分支 采用的是强制push操作
  当前问题:
	对齐方法 icp对齐TOF模组应用方面：深度图和点云并不对应，所以无法使用，icp本身算法经过测试可以使用。
	orb算子对齐部分，在门的重构对齐方面，感觉对应不够准确，原因可能是因为背景比较简单？可以试试复杂场景下的物体建模
	重构成像部分问题：成像多帧重建出现多个物体（问题：显示部分是将h_chunk中的三角形面片打印出来，如果出现对齐不准确的问题，
						则会在周围部分的地方出现三角形面片。误差面片如何删除，这个问题也是有待解决）。
	由fram2base（从像素投影到现实世界的计算过程仅在DDA部分使用， 按照chunk半径选取球型空间，然后利用DDA算法取相交的block，这个地方发现图像大小为（640,480）但是宽度仅能取到150，很奇怪）

   修改部分成像参数，当前问题:视频的拍摄存在问题，重建门的过程应该从左向右， 现在重构的目标变成墙了。
   DDA部分还存在一些问题:按照光线投影过程中球型chunk的相交线方法不明确
   多帧成像部分的问题:应该只存在一个fusion之后的成像(）
   再研究一下保存点云部分的代码
   调整pcl的视角，现在的观察视角和成像视角存在较大偏差
   速度问题:cuda部分的grid和block设置方法不合理。
   对齐方面:拍摄新一组图像验证 或者 能否尝试用点云的方法实现icp对齐。
   创新问题:
传输命令：scp -r -P 2290 mykfusion lhx@pixtalks-015:
继续搞懂投影的问题：明确搞懂
bundleadjust的大体意义
搞清楚featur提取中评估距离误差的具体方法；利用bundleadjust方法调试之前拍摄过的照片

物体前后景分割，可以尝试利用假定的物体中心在图像中心位置的假定。



可以比较的点：
    对齐方式：icp对齐和orb特征点对齐
    特征点对齐部分（拍一组数据，利用orb特征点和sift特征点做比较）
    去平面方法部分：可以采用最小二乘，ransc方法，pca主成分分析方法
    组织结构部分：voxelhashing方法，在此基础上的改进性hash方法（不知道好不好实现），kinectfusion方法。

    tsdf（不好比较）marchingcubes 不好比较。
    ransc算法：
        总共有N个点，三个点构成平面
        设置迭代次数，
        设置阈值（点到平面的距离在某个范围则属于该平面）

        迭代：
            从N个点中随机选取三个点
            计算对应平面方程
            计算点到平面距离，判断有多少点数于平面

        迭代结束
        选取最优结果。

    小的优化点：采样规则：基于被重建物体在中心，在去除平面的步骤中可以采用，先稠密，中稀疏，后稠密的采样规则。
            可以吸收拒绝采样的精华：中心位置被拒绝的概率更高，周围位置处的点被拒绝的可能行更低。
            采用拒绝采样原理，再图像上设置二维高斯分布，然后高于分布的区域被接受。

            比较参数：设置不同截断距离时，去除表面的效果。

            时间比较：传统方法和GPU多线程处理时间。


